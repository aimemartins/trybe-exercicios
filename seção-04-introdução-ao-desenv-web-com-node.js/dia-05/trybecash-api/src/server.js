// src/server.js
const app = require('./app');
const connection = require('./db/connection');

const PORT = 3001;

app.listen(PORT, async () => {
  console.log(`API TrybeCash est√° sendo executada na porta ${PORT}`);
  console.log(`Valor da vari√°vel de ambiente $USER: ${process.env.USER}`);
  // O c√≥digo abaixo √© para testarmos a comunica√ß√£o com o MySQL

  // const [result] = await connection.execute('SELECT 1');
  // if (result) {
  //   console.log('MySQL connection OK');
  // }
});

/* 
Acima, criamos uma constante app que importa o que foi definido no arquivo src/app.js e, a partir dessa constante, iniciamos o nosso express executando a fun√ß√£o app.listen().

Dentro da fun√ß√£o app.listen() foi adicionado um trecho de c√≥digo que executa a fun√ß√£o connection.execute(), que recebe como par√¢metro uma consulta SQL SELECT 1. Essa fun√ß√£o realiza uma conex√£o com o MySQL, executa o SQL passado como par√¢metro e recebe uma resposta que √© armazenada na constante result (note que o processo de desestrutura√ß√£o de vari√°veis est√° sendo utilizado! üòé).

Depois √© verificado com um if se o objeto result cont√©m alguma coisa e, em caso de positivo, √© impresso no console a mensagem MySQL connection OK. Se voc√™ for no console e executar o comando npm start, o express ser√° iniciado e apresentar√° a seguinte sa√≠da:

API TrybeCash est√° sendo executada na porta ${PORT}
MySQL connection OK


Antes de avan√ßarmos, vamos refatorar nosso arquivo src/server.js para retirar o c√≥digo que utilizamos para testar se a comunica√ß√£o com o MySQL estava ocorrendo, pois esse c√≥digo n√£o ser√° mais √∫til para n√≥s de agora em diante. O arquivo dever√° estar assim:
*/